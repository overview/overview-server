#!/bin/sh
#
# Runs tests using pristene containers. Writes to ./reports/**/*.xml`.

set -e
set -x

DIR="$(dirname "$0")"

. "$DIR"/config

docker_compose() {
  OVERVIEW_INTEGRATION_TESTER_VERSION="$OVERVIEW_INTEGRATION_TESTER_VERSION" \
  WAIT_FOR_URLS="$WAIT_FOR_URLS" \
  docker-compose \
    --project-name "$DOCKER_COMPOSE_PROJECT_NAME" \
    -f "$DIR"/docker-compose.yml \
    "$@"
}

docker_compose down -v # in case a previous run errored out
# Assume overview-*:latest is already tagged by ../docker/build. The only
# prep we need to do is pull the integration-tester image.
docker_compose pull integration-test

# Run oververview-db-evolution-applier first, so we don't request from
# overview-web too early.
#
# It isn't in docker-compose.yml, because
# `docker-compose up --abort-on-container-exit` aborts when it's done.
#
# And we don't just run `docker-compose up integration-test` below, because that
# doesn't output all the log messages. And we want all the log messages, because
# they help us debug problems on Jenkins.
docker_compose up -d overview-database
docker run --rm \
  --network ${DOCKER_COMPOSE_PROJECT_NAME}_database \
  overview-db-evolution-applier:latest

# Delete tests from previous run
find "$DIR"/reports -name '*.xml' -exec rm -f {} \;

# Allow tester to write reports
docker_compose run \
  --no-deps \
  --user=root \
  --rm \
  integration-test \
  chown -vR chromium:chromium reports/

# integration-test will end, and one of three things will have happened:
#
# 1. It succeeded -- and wrote to reports/*.xml
# 2. Some tests failed -- they're in reports/*.xml and Jenkins will see them
# 3. There was a catastrophic failure -- there are no reports/*.xml and Jenkins will complain
#
# We'll report the exit code after we `docker-compose down -v`.
set +e
docker_compose up \
  --exit-code-from integration-test
EXIT_CODE=$?
set -e

docker_compose down -v

exit $EXIT_CODE
